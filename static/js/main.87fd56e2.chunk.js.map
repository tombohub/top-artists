{"version":3,"sources":["components/NavBar.jsx","Context.jsx","components/List.jsx","components/TrackList.jsx","components/ArtistList.jsx","components/Routes.jsx","components/countries.js","components/CountryInput.jsx","components/firebaseFetch.js","components/Main.jsx","App.jsx","serviceWorker.js","index.js"],"names":["NavBar","props","Fragment","className","activeClassName","to","tracks","artists","Context","createContext","Provider","children","useState","setTracks","setArtists","country","setCountry","value","List","type","data","length","map","item","i","key","href","track","name","artist","rel","target","TrackList","context","useContext","ArtistList","Routes","path","countries","CountryInput","countrySuggestions","setCountrySuggestions","inputValue","setInputValue","history","useHistory","handleSubmit","e","preventDefault","includes","onSubmit","push","alert","action","autoComplete","onChange","event","subString","regex","RegExp","suggestions","filter","test","id","placeholder","onClick","firebaseFetch","prevCountry","urlTracks","urlArtists","axios","get","then","res","console","log","catch","err","fetchTracks","topartists","fetchArtists","Main","countryRef","useRef","useEffect","current","v","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"yRAuCeA,MAnCf,SAAgBC,GAId,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,kCACb,wBAAIA,UAAU,oBACZ,wBAAIA,UAAU,4CACZ,kBAAC,IAAD,CACEA,UAAU,iBACVC,gBAAgB,SAChBC,GAAIJ,EAAMK,QAHZ,WAQF,wBAAIH,UAAU,8BACZ,kBAAC,IAAD,CACEA,UAAU,iBACVC,gBAAgB,SAChBC,GAAIJ,EAAMM,SAHZ,gB,cCjBCC,EAAUC,0BAEhB,SAASC,EAAT,GAAiC,IAAbC,EAAY,EAAZA,SAAY,EACTC,mBAAS,IADA,mBAC9BN,EAD8B,KACtBO,EADsB,OAEPD,mBAAS,IAFF,mBAE9BL,EAF8B,KAErBO,EAFqB,OAGPF,mBAAS,IAHF,mBAG9BG,EAH8B,KAGrBC,EAHqB,KAKrC,OACE,kBAACR,EAAQE,SAAT,CACEO,MAAO,CACLX,SACAC,UACAQ,UACAF,YACAC,aACAE,eAGDL,GCqBQO,MA1Cf,SAAcjB,GAOZ,OACE,6BACqB,KAAlBA,EAAMc,SACL,uBAAGZ,UAAU,QAAb,SACSF,EAAMkB,KADf,OACyBlB,EAAMc,SAGhCd,EAAMmB,KAAKC,OAAS,GACnBpB,EAAMmB,KAAKE,KAAI,SAACC,EAAMC,GAAP,OACb,uBACEC,IAAKD,EACLE,KACiB,UAAfzB,EAAMkB,MAlBAQ,EAmBQJ,EAAKK,KAnBR,0CACcD,EADd,aAGJE,EAiBQN,EAAKK,KAjBP,0CACYC,EADZ,aAmBfC,IAAI,sBACJC,OAAO,UAEP,yBAAK5B,UAAU,aACb,yBAAKA,UAAU,4CACb,6BACkB,UAAfF,EAAMkB,KACHI,EAAKK,KAAO,OAASL,EAAKM,OAAOD,KACjCL,EAAKK,MAEX,qDA7BK,IAAAC,EAHDF,OCaLK,MARf,YAAiC,IAAZjB,EAAW,EAAXA,QACbkB,EAAUC,qBAAW1B,GAE3B,OACE,kBAAC,EAAD,CAAMY,KAAMa,EAAQ3B,OAAQS,QAASA,EAASI,KAAK,WCGxCgB,MARf,YAAkC,IAAZpB,EAAW,EAAXA,QACdkB,EAAUC,qBAAW1B,GAE3B,OACE,kBAAC,EAAD,CAAMY,KAAMa,EAAQ1B,QAASQ,QAASA,EAASI,KAAK,YCWzCiB,MAbf,SAAgBnC,GACd,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOoC,KAAMpC,EAAMK,QACjB,kBAAC,EAAD,CAAWS,QAASd,EAAMc,WAE5B,kBAAC,IAAD,CAAOsB,KAAMpC,EAAMM,SACjB,kBAAC,EAAD,CAAYQ,QAASd,EAAMc,aChBtBuB,EAAY,CACrB,cACA,mBACA,UACA,UACA,iBACA,UACA,SACA,WACA,aACA,sBACA,YACA,UACA,QACA,YACA,UACA,aACA,UACA,UACA,aACA,WACA,UACA,UACA,SACA,QACA,UACA,SACA,UACA,yBACA,WACA,gBACA,SACA,iCACA,oBACA,WACA,eACA,UACA,WACA,WACA,SACA,aACA,iBACA,2BACA,OACA,QACA,QACA,mBACA,0BACA,WACA,UACA,QACA,wCACA,eACA,aACA,gBACA,UACA,OACA,SACA,iBACA,UACA,WACA,WACA,qBACA,UACA,QACA,cACA,oBACA,UACA,UACA,WACA,8BACA,gBACA,OACA,UACA,SACA,gBACA,mBACA,8BACA,QACA,SACA,UACA,UACA,QACA,YACA,SACA,YACA,UACA,aACA,OACA,YACA,WACA,SACA,gBACA,SACA,QACA,oCACA,gCACA,WACA,YACA,UACA,UACA,QACA,YACA,4BACA,OACA,UACA,cACA,SACA,QACA,UACA,QACA,SACA,SACA,aACA,QACA,WACA,yCACA,qBACA,SACA,aACA,mCACA,SACA,UACA,UACA,UACA,yBACA,gBACA,YACA,aACA,QACA,6CACA,aACA,SACA,WACA,WACA,OACA,QACA,mBACA,aACA,aACA,YACA,UACA,SACA,kCACA,uBACA,SACA,WACA,aACA,UACA,aACA,UACA,UACA,QACA,QACA,cACA,uBACA,gBACA,cACA,YACA,QACA,UACA,OACA,iBACA,2BACA,SACA,OACA,WACA,QACA,kCACA,SACA,mBACA,WACA,OACA,cACA,WACA,SACA,WACA,cACA,QACA,UACA,UACA,qBACA,SACA,eACA,wBACA,cACA,4BACA,mCACA,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","file":"static/js/main.87fd56e2.chunk.js","sourcesContent":["import React from \"react\";\nimport { NavLink } from \"react-router-dom\";\nimport \"./navbar.css\";\n\nfunction NavBar(props) {\n  /* -------------------------------------------------------------------------- */\n  /*                                   Return                                   */\n  /* -------------------------------------------------------------------------- */\n  return (\n    <React.Fragment>\n      <nav className=\"navbar  justify-content-center\">\n        <ul className=\"navbar-nav w-100\">\n          <li className=\"nav-item border-bottom w-100 text-center\">\n            <NavLink\n              className=\"nav-link w-100\"\n              activeClassName=\"active\"\n              to={props.tracks}\n            >\n              Tracks\n            </NavLink>\n          </li>\n          <li className=\"nav-item w-100 text-center\">\n            <NavLink\n              className=\"nav-link w-100\"\n              activeClassName=\"active\"\n              to={props.artists}\n            >\n              Artists\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </React.Fragment>\n  );\n}\n\n/* -------------------------------------------------------------------------- */\n/*                                   Export                                   */\n/* -------------------------------------------------------------------------- */\nexport default NavBar;\n","import React, { createContext, useState } from \"react\";\n\n/**\n * Used in: ArtistList\n */\nexport const Context = createContext();\n\nexport function Provider({ children }) {\n  const [tracks, setTracks] = useState([]);\n  const [artists, setArtists] = useState([]);\n  const [country, setCountry] = useState(\"\");\n\n  return (\n    <Context.Provider\n      value={{\n        tracks,\n        artists,\n        country,\n        setTracks,\n        setArtists,\n        setCountry,\n      }}\n    >\n      {children}\n    </Context.Provider>\n  );\n}\n","import React from \"react\";\n\nfunction List(props) {\n  const trackHref = track =>\n    `https://open.spotify.com/search/${track}/tracks`;\n\n  const artistHref = artist =>\n    `https://open.spotify.com/search/${artist}/artists`;\n\n  return (\n    <div>\n      {props.country !== \"\" && (\n        <p className=\"lead\">\n          Top 7 {props.type} in {props.country}\n        </p>\n      )}\n      {props.data.length > 0 &&\n        props.data.map((item, i) => (\n          <a\n            key={i}\n            href={\n              props.type === \"track\"\n                ? trackHref(item.name)\n                : artistHref(item.name)\n            }\n            rel=\"noopener noreferrer\"\n            target=\"_blank\"\n          >\n            <div className=\"card my-2\">\n              <div className=\"card-body d-flex justify-content-between\">\n                <div>\n                  {props.type === \"track\"\n                    ? item.name + \" by \" + item.artist.name\n                    : item.name}\n                </div>\n                <div>Search on Spotify</div>\n              </div>\n            </div>\n          </a>\n        ))}\n    </div>\n  );\n}\n\nexport default List;\n","import React, { useContext } from \"react\";\nimport { Context } from \"../Context\";\nimport List from \"./List\";\n\n/**\n *List all the top tracks in selected country\n * @param {props} props.country country name\n */\nfunction TrackList({ country }) {\n  const context = useContext(Context);\n\n  return (\n    <List data={context.tracks} country={country} type=\"track\" />\n  );\n}\n\nexport default TrackList;\n","import React, { useContext } from \"react\";\nimport { Context } from \"../Context\";\nimport List from \"./List\";\n\n/**\n * Container for Artist list\n */\nfunction ArtistList({ country }) {\n  const context = useContext(Context);\n\n  return (\n    <List data={context.artists} country={country} type=\"artist\" />\n  );\n}\n\nexport default ArtistList;\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport TrackList from \"./TrackList\";\nimport ArtistList from \"./ArtistList\";\n\n/**\n * Collection of routes\n * @param {props} props for passing routes\n */\nfunction Routes(props) {\n  return (\n    <Switch>\n      <Route path={props.tracks}>\n        <TrackList country={props.country} />\n      </Route>\n      <Route path={props.artists}>\n        <ArtistList country={props.country} />\n      </Route>\n    </Switch>\n  );\n}\n\nexport default Routes;\n","export const countries = [\n    \"Afghanistan\",\n    \"Åland Islands\",\n    \"Albania\",\n    \"Algeria\",\n    \"American Samoa\",\n    \"Andorra\",\n    \"Angola\",\n    \"Anguilla\",\n    \"Antarctica\",\n    \"Antigua and Barbuda\",\n    \"Argentina\",\n    \"Armenia\",\n    \"Aruba\",\n    \"Australia\",\n    \"Austria\",\n    \"Azerbaijan\",\n    \"Bahamas\",\n    \"Bahrain\",\n    \"Bangladesh\",\n    \"Barbados\",\n    \"Belarus\",\n    \"Belgium\",\n    \"Belize\",\n    \"Benin\",\n    \"Bermuda\",\n    \"Bhutan\",\n    \"Bolivia\",\n    \"Bosnia and Herzegovina\",\n    \"Botswana\",\n    \"Bouvet Island\",\n    \"Brazil\",\n    \"British Indian Ocean Territory\",\n    \"Brunei Darussalam\",\n    \"Bulgaria\",\n    \"Burkina Faso\",\n    \"Burundi\",\n    \"Cambodia\",\n    \"Cameroon\",\n    \"Canada\",\n    \"Cape Verde\",\n    \"Cayman Islands\",\n    \"Central African Republic\",\n    \"Chad\",\n    \"Chile\",\n    \"China\",\n    \"Christmas Island\",\n    \"Cocos (Keeling) Islands\",\n    \"Colombia\",\n    \"Comoros\",\n    \"Congo\",\n    \"Congo, The Democratic Republic of the\",\n    \"Cook Islands\",\n    \"Costa Rica\",\n    \"Cote D\\'Ivoire\",\n    \"Croatia\",\n    \"Cuba\",\n    \"Cyprus\",\n    \"Czech Republic\",\n    \"Denmark\",\n    \"Djibouti\",\n    \"Dominica\",\n    \"Dominican Republic\",\n    \"Ecuador\",\n    \"Egypt\",\n    \"El Salvador\",\n    \"Equatorial Guinea\",\n    \"Eritrea\",\n    \"Estonia\",\n    \"Ethiopia\",\n    \"Falkland Islands (Malvinas)\",\n    \"Faroe Islands\",\n    \"Fiji\",\n    \"Finland\",\n    \"France\",\n    \"French Guiana\",\n    \"French Polynesia\",\n    \"French Southern Territories\",\n    \"Gabon\",\n    \"Gambia\",\n    \"Georgia\",\n    \"Germany\",\n    \"Ghana\",\n    \"Gibraltar\",\n    \"Greece\",\n    \"Greenland\",\n    \"Grenada\",\n    \"Guadeloupe\",\n    \"Guam\",\n    \"Guatemala\",\n    \"Guernsey\",\n    \"Guinea\",\n    \"Guinea-Bissau\",\n    \"Guyana\",\n    \"Haiti\",\n    \"Heard Island and Mcdonald Islands\",\n    \"Holy See (Vatican City State)\",\n    \"Honduras\",\n    \"Hong Kong\",\n    \"Hungary\",\n    \"Iceland\",\n    \"India\",\n    \"Indonesia\",\n    \"Iran, Islamic Republic Of\",\n    \"Iraq\",\n    \"Ireland\",\n    \"Isle of Man\",\n    \"Israel\",\n    \"Italy\",\n    \"Jamaica\",\n    \"Japan\",\n    \"Jersey\",\n    \"Jordan\",\n    \"Kazakhstan\",\n    \"Kenya\",\n    \"Kiribati\",\n    \"Korea, Democratic People\\'S Republic of\",\n    \"Korea, Republic of\",\n    \"Kuwait\",\n    \"Kyrgyzstan\",\n    \"Lao People\\'S Democratic Republic\",\n    \"Latvia\",\n    \"Lebanon\",\n    \"Lesotho\",\n    \"Liberia\",\n    \"Libyan Arab Jamahiriya\",\n    \"Liechtenstein\",\n    \"Lithuania\",\n    \"Luxembourg\",\n    \"Macao\",\n    \"Macedonia, The Former Yugoslav Republic of\",\n    \"Madagascar\",\n    \"Malawi\",\n    \"Malaysia\",\n    \"Maldives\",\n    \"Mali\",\n    \"Malta\",\n    \"Marshall Islands\",\n    \"Martinique\",\n    \"Mauritania\",\n    \"Mauritius\",\n    \"Mayotte\",\n    \"Mexico\",\n    \"Micronesia, Federated States of\",\n    \"Moldova, Republic of\",\n    \"Monaco\",\n    \"Mongolia\",\n    \"Montserrat\",\n    \"Morocco\",\n    \"Mozambique\",\n    \"Myanmar\",\n    \"Namibia\",\n    \"Nauru\",\n    \"Nepal\",\n    \"Netherlands\",\n    \"Netherlands Antilles\",\n    \"New Caledonia\",\n    \"New Zealand\",\n    \"Nicaragua\",\n    \"Niger\",\n    \"Nigeria\",\n    \"Niue\",\n    \"Norfolk Island\",\n    \"Northern Mariana Islands\",\n    \"Norway\",\n    \"Oman\",\n    \"Pakistan\",\n    \"Palau\",\n    \"Palestinian Territory, Occupied\",\n    \"Panama\",\n    \"Papua New Guinea\",\n    \"Paraguay\",\n    \"Peru\",\n    \"Philippines\",\n    \"Pitcairn\",\n    \"Poland\",\n    \"Portugal\",\n    \"Puerto Rico\",\n    \"Qatar\",\n    \"Reunion\",\n    \"Romania\",\n    \"Russian Federation\",\n    \"RWANDA\",\n    \"Saint Helena\",\n    \"Saint Kitts and Nevis\",\n    \"Saint Lucia\",\n    \"Saint Pierre and Miquelon\",\n    \"Saint Vincent and the Grenadines\",\n    \"Samoa\",\n    \"San Marino\",\n    \"Sao Tome and Principe\",\n    \"Saudi Arabia\",\n    \"Senegal\",\n    \"Serbia and Montenegro\",\n    \"Seychelles\",\n    \"Sierra Leone\",\n    \"Singapore\",\n    \"Slovakia\",\n    \"Slovenia\",\n    \"Solomon Islands\",\n    \"Somalia\",\n    \"South Africa\",\n    \"South Georgia and the South Sandwich Islands\",\n    \"Spain\",\n    \"Sri Lanka\",\n    \"Sudan\",\n    \"Suriname\",\n    \"Svalbard and Jan Mayen\",\n    \"Swaziland\",\n    \"Sweden\",\n    \"Switzerland\",\n    \"Syrian Arab Republic\",\n    \"Taiwan, Province of China\",\n    \"Tajikistan\",\n    \"Tanzania, United Republic of\",\n    \"Thailand\",\n    \"Timor-Leste\",\n    \"Togo\",\n    \"Tokelau\",\n    \"Tonga\",\n    \"Trinidad and Tobago\",\n    \"Tunisia\",\n    \"Turkey\",\n    \"Turkmenistan\",\n    \"Turks and Caicos Islands\",\n    \"Tuvalu\",\n    \"Uganda\",\n    \"Ukraine\",\n    \"United Arab Emirates\",\n    \"United Kingdom\",\n    \"United States\",\n    \"United States Minor Outlying Islands\",\n    \"Uruguay\",\n    \"Uzbekistan\",\n    \"Vanuatu\",\n    \"Venezuela\",\n    \"Viet Nam\",\n    \"Virgin Islands, British\",\n    \"Virgin Islands, U.S.\",\n    \"Wallis and Futuna\",\n    \"Western Sahara\",\n    \"Yemen\",\n    \"Zambia\",\n    \"Zimbabwe\"\n]","import React, { useContext, useState } from \"react\";\nimport { countries } from \"./countries\";\nimport { Context } from \"../Context\";\nimport { useHistory } from \"react-router-dom\";\n\n/**\n * Input field to choose the country\n * Props passed from Main\n */\nfunction CountryInput(props) {\n  const [countrySuggestions, setCountrySuggestions] = useState([]);\n  const [inputValue, setInputValue] = useState(\"\");\n\n  // using for redirect after country input\n  const history = useHistory();\n  const context = useContext(Context);\n\n  /* -------------------------------- Functions ------------------------------- */\n  /**\n   * Filters Countries based on typing in input element and sets the countries suggestions\n   * @param {event} event input event onChange\n   */\n  function filterCountries(event) {\n    const subString = event.target.value;\n    setInputValue(subString);\n\n    if (subString !== \"\") {\n      const regex = new RegExp(`^${subString}`, \"i\");\n      const suggestions = countries.filter(country =>\n        regex.test(country)\n      );\n      setCountrySuggestions(suggestions);\n    } else {\n      setCountrySuggestions([]);\n    }\n  }\n\n  /**\n   * Renders the current country suggestions list\n   */\n  function renderSuggestions() {\n    return (\n      <ul className=\"list-group\">\n        {countrySuggestions.map((country, i) => (\n          <button\n            type=\"submit\"\n            key={i}\n            className=\"btn btn-secondary\"\n            onClick={e => handleSubmit(e, country)}\n          >\n            {country}\n          </button>\n        ))}\n      </ul>\n    );\n  }\n\n  /**\n   * Submits the form, clears the input field and lifts the country to parent Component (Main)\n   * redirects to /tracks\n   * @param {event} e submit form event\n   */\n  function handleSubmit(e, country) {\n    e.preventDefault();\n\n    if (countries.includes(country)) {\n      setInputValue(\"\");\n      setCountrySuggestions([]);\n      props.onSubmit(country);\n      history.push(\"/tracks\");\n    } else {\n      alert(`No ${country}  country yet!`);\n    }\n  }\n\n  /* --------------------------------- Return --------------------------------- */\n  return (\n    <>\n      <p className=\"lead\">List most popular:</p>\n      <form\n        action=\"\"\n        onSubmit={e => handleSubmit(e, inputValue)}\n        autoComplete=\"off\"\n      >\n        <input\n          onChange={filterCountries}\n          value={inputValue}\n          id=\"country\"\n          type=\"text\"\n          placeholder=\"Country\"\n          className=\"form-control w-75 mx-auto\"\n        />\n        <div>{renderSuggestions()}</div>\n      </form>\n    </>\n  );\n}\n\nexport default CountryInput;\n","import axios from \"axios\";\n\nfunction firebaseFetch(country, prevCountry, context) {\n  const urlTracks = `https://us-central1-top-tracks-acb92.cloudfunctions.net/fetchTracks?country=${country}`;\n\n  const urlArtists = `https://us-central1-top-tracks-acb92.cloudfunctions.net/fetchArtists?country=${country}`;\n\n  function fetchTracks(urlTracks) {\n    axios\n      .get(urlTracks)\n      .then(res => {\n        const tracks = res.data.tracks.track;\n        console.log(\"tracks axios:\", tracks);\n        console.log(\n          \"country axios:\",\n          res.data.tracks[\"@attr\"].country\n        );\n        context.setTracks(tracks);\n      })\n      .catch(err => console.log(\"error:\", err));\n  }\n\n  function fetchArtists(urlArtists) {\n    axios\n      .get(urlArtists)\n      .then(res => {\n        const artists = res.data.topartists.artist;\n        console.log(\"artists axios:\", artists);\n        context.setArtists(artists);\n      })\n      .catch(err => console.log(\"error:\", err));\n  }\n\n  // Check if the request is for new country, so the fetching doesn't repeat on rerender\n  if (country !== prevCountry) {\n    fetchTracks(urlTracks);\n    fetchArtists(urlArtists);\n    console.log(\"countryref:\", prevCountry);\n  }\n}\n\nexport default firebaseFetch;\n","import React, {\n  useState,\n  useRef,\n  useContext,\n  useEffect,\n} from \"react\";\nimport Routes from \"./Routes\";\nimport CountryInput from \"./CountryInput\";\nimport { Context } from \"../Context\";\nimport fetch from \"./fetch\";\nimport firebaseFetch from \"./firebaseFetch\";\n\n/**\n *Component which holds the input field and list (tracks or artists)\n * @param {props} props from App component (passing routes)\n */\nfunction Main(props) {\n  const [country, setCountry] = useState(\"\");\n  const countryRef = useRef(country);\n  const context = useContext(Context);\n\n\n\n  useEffect(() => {\n    firebaseFetch(country, countryRef.current, context);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [country]);\n\n  // useEffect(() => {\n  //   fetch(country, countryRef.current, context);\n  //   // eslint-disable-next-line react-hooks/exhaustive-deps\n  // }, [country]);\n  return (\n    <>\n      <div className=\"mx-auto mt-3 text-center\">\n        <CountryInput onSubmit={v => setCountry(v)} />\n        <Routes\n          tracks={props.tracks}\n          artists={props.artists}\n          country={country}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default Main;\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/NavBar\";\nimport Main from \"./components/Main\";\nimport { Provider } from \"./Context\";\n\nfunction App() {\n  /* --------------------------------- Routes --------------------------------- */\n\n  const tracks = \"/tracks\";\n  const artists = \"/artists\";\n\n  return (\n    <>\n      <Provider>\n        <NavBar tracks={tracks} artists={artists} />\n        <Main tracks={tracks} artists={artists} />\n      </Provider>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from 'react-router-dom'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}